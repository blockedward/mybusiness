# Maintained by Ansible
bootstrap.servers={% for server in hosts.kafka.brokers %}{{ hostvars[server].ansible_fqdn }}:{{ broker.config.port }}{{ '' if loop.last else ',' }}{% endfor %}

value.converter.schema.registry.url={% for server in hosts.schema.registries %}{{ hostvars[server].ansible_fqdn }}:{{ registry.config.port }}{{ '' if loop.last else ',' }}{% endfor %}

key.converter.schema.registry.url={% for server in hosts.schema.registries %}http://{{ hostvars[server].ansible_fqdn }}:{{ registry.config.port }}/{{ '' if loop.last else ',' }}{% endfor %}

{% if security_mode in ['sasl_ssl', 'ssl'] %}
#SSL common additions
ssl.truststore.location=/var/ssl/private/client.truststore.jks
ssl.truststore.password=confluent
ssl.keystore.location=/var/ssl/private/client.keystore.jks
ssl.keystore.password=confluent
ssl.key.password=confluent
producer.ssl.truststore.location=/var/ssl/private/client.truststore.jks
producer.ssl.truststore.password=confluent
producer.ssl.keystore.location=/var/ssl/private/client.keystore.jks
producer.ssl.keystore.password=confluent
producer.ssl.key.password=confluent
consumer.ssl.truststore.location=/var/ssl/private/client.truststore.jks
consumer.ssl.truststore.password=confluent
consumer.ssl.keystore.location=/var/ssl/private/client.keystore.jks
consumer.ssl.keystore.password=confluent
consumer.ssl.key.password=confluent
producer.confluent.monitoring.interceptor.ssl.truststore.location=/var/ssl/private/client.truststore.jks
producer.confluent.monitoring.interceptor.ssl.truststore.password=confluent
producer.confluent.monitoring.interceptor.ssl.keystore.location=/var/ssl/private/client.keystore.jks
producer.confluent.monitoring.interceptor.ssl.keystore.password=confluent
producer.confluent.monitoring.interceptor.ssl.key.password=confluent
consumer.confluent.monitoring.interceptor.ssl.truststore.location=/var/ssl/private/client.truststore.jks
consumer.confluent.monitoring.interceptor.ssl.truststore.password=confluent
consumer.confluent.monitoring.interceptor.ssl.keystore.location=/var/ssl/private/client.keystore.jks
consumer.confluent.monitoring.interceptor.ssl.keystore.password=confluent
consumer.confluent.monitoring.interceptor.ssl.key.password=confluent
{% endif %}

{% if security_mode == 'sasl_ssl' %}
#SASL additions
security.protocol=SASL_SSL
producer.security.protocol=SASL_SSL
consumer.security.protocol=SASL_SSL
producer.confluent.monitoring.interceptor.security.protocol=SASL_SSL
consumer.confluent.monitoring.interceptor.security.protocol=SASL_SSL
sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="client" password="client-secret";
sasl.mechanism=PLAIN
producer.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="client" password="client-secret";
producer.sasl.mechanism=PLAIN
consumer.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="client" password="client-secret";
consumer.sasl.mechanism=PLAIN
producer.confluent.monitoring.interceptor.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="client" password="client-secret";
producer.confluent.monitoring.interceptor.sasl.mechanism=PLAIN
consumer.confluent.monitoring.interceptor.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="client" password="client-secret";
consumer.confluent.monitoring.interceptor.sasl.mechanism=PLAIN
{% endif %}

{% if security_mode == 'ssl' %}
#SSL additions
security.protocol=SSL
consumer.security.protocol=SSL
producer.security.protocol=SSL
producer.confluent.monitoring.interceptor.security.protocol=SSL
consumer.confluent.monitoring.interceptor.security.protocol=SSL
{% endif %}

{% for key, value in kafka.connect.distributed.config.items() %}
{{ key}}={{value }}
{% endfor %}
