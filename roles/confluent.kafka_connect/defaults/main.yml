kafka_connect_jolokia_java_arg_buildout: "-javaagent:{{jolokia_jar_path}}=port={{kafka_connect_jolokia_port}},host=0.0.0.0"
kafka_connect_log4j_java_arg_buildout: "-Dlog4j.configuration=file:{{kafka_connect.log4j_file}}"

kafka_connect_custom_log4j: "{{ custom_log4j }}"

kafka_connect_custom_java_args: ""
kafka_connect_java_args:
  - "{{ kafka_connect_jolokia_java_arg_buildout if kafka_connect_jolokia_enabled|bool else '' }}"
  - "{{ kafka_connect_log4j_java_arg_buildout if kafka_connect_custom_log4j|bool else '' }}"

kafka_connect_final_java_args: "{{ kafka_connect_java_args + [ kafka_connect_custom_java_args ] }}"

# Empty values will not be written into override.conf
kafka_connect_service_overrides:
  LimitNOFILE: 100000
  User: "{{ kafka_connect_user if kafka_connect_user != kafka_connect_default_user else '' }}"
  Group: "{{ kafka_connect_group if kafka_connect_group != kafka_connect_default_group else '' }}"
kafka_connect_service_environment_overrides:
  KAFKA_HEAP_OPTS: "-Xms256M -Xmx2G"
  KAFKA_OPTS: "{{ kafka_connect_final_java_args | java_arg_build_out }}"

kafka_connect_default_internal_replication_factor: "{{ [ groups['kafka_broker'] | length, 3 ] | min }}"

kafka_connect_group_id: connect-cluster

kafka_connect_metrics:
  enabled: true
  consumer_interceptors: []
  producer_interceptors: []
  servers: "{{groups['kafka_broker']}}"
  listener: "{{kafka_broker_listeners[kafka_connect_kafka_listener_name]}}"
kafka_connect_metrics_bootstrap_servers: "{% for host in kafka_connect_metrics.servers %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_connect_metrics.listener.port}}{% endfor %}"

kafka_connect:
  appender_log_path: /var/log/kafka/
  appender_log_name: connect-distributed.log
  appender_max_log_files: 10
  appender_log_file_size: 100MB
  properties:
    rest.port: "{{kafka_connect_rest_port}}"
    internal.key.converter: org.apache.kafka.connect.json.JsonConverter
    internal.key.converter.schemas.enable: "false"
    internal.value.converter: org.apache.kafka.connect.json.JsonConverter
    internal.value.converter.schemas.enable: "false"
    offset.flush.interval.ms: 10000
    offset.storage.replication.factor: "{{ kafka_connect_default_internal_replication_factor }}"
    offset.storage.topic: "{{kafka_connect_group_id}}-offsets"
    status.storage.replication.factor: "{{ kafka_connect_default_internal_replication_factor }}"
    status.storage.topic: "{{kafka_connect_group_id}}-status"
    key.converter: io.confluent.connect.avro.AvroConverter
    value.converter: io.confluent.connect.avro.AvroConverter
    plugin.path: /usr/share/java
    connector.client.config.override.policy: All
